/* --------------------------------------- */
/*            typography mixins            */
/* --------------------------------------- */

/* -------------- text block ------------- */

//format text that goes in block with
// title, paragraph and other secondary texts
@mixin text-block {
  h1,
  p,
  span {
    margin: 0 !important;
  }
  h1,
  .title,
  .preview-title {
    line-height: 1 !important;
  }
  p {
    padding-top: 0.8rem !important;
    // max-width: 72ch !important;
    line-height: 1.5 !important;
    // padding: 0.5rem 0;
  }
}

/* ----------- text shortening ----------- */

// truncation on texts which overflow their
// containers
// no argument taken

@mixin text-shorten {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
@mixin multiline-text-shorten($lineHeight: 1.2, $lines: 3) {
  /* Required declarations: */
  // @include hide-last-line();
  position: relative;
  overflow: hidden;
  display: -webkit-box;
  line-height: $lineHeight !important;
  max-height: $lines * $lineHeight;
  -webkit-box-orient: vertical;

  /* Limit the text block to lines */
  -webkit-line-clamp: $lines;
}
@mixin hide-last-line {
  &::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    height: 100%;
    width: 100%;

    background: rgba(255, 255, 255, 0);
    background: -moz-linear-gradient(
      top,
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 255, 255, 0) 90%,
      rgba(255, 255, 255, 1) 100%
    );
    background: -webkit-gradient(
      left top,
      left bottom,
      color-stop(0%, rgba(255, 255, 255, 0)),
      color-stop(90%, rgba(255, 255, 255, 0)),
      color-stop(100%, rgba(255, 255, 255, 1))
    );
    background: -webkit-linear-gradient(
      top,
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 255, 255, 0) 90%,
      rgba(255, 255, 255, 1) 100%
    );
    background: -o-linear-gradient(
      top,
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 255, 255, 0) 90%,
      rgba(255, 255, 255, 1) 100%
    );
    background: -ms-linear-gradient(
      top,
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 255, 255, 0) 90%,
      rgba(255, 255, 255, 1) 100%
    );
    background: linear-gradient(
      to bottom,
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 255, 255, 0) 90%,
      rgba(255, 255, 255, 1) 100%
    );
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#ffffff', GradientType=0 );
  }
}

/* --------------------------------------- */
/*                  layout                 */
/* --------------------------------------- */

/* ---------- overlay background --------- */
@mixin overlay-bg($opacity) {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  background-color: rgba(0, 0, 0, $opacity);
}
@mixin floor-fade {
 /*  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%; */

  background: rgba(255, 255, 255, 0);
  background: -moz-linear-gradient(
    top,
    rgba(255, 255, 255, 0) 0%,
    rgba(0, 0, 0, 0.85) 100%
  );
  background: -webkit-gradient(
    left top,
    left bottom,
    color-stop(0%, rgba(255, 255, 255, 0)),
    color-stop(100%, rgba(0, 0, 0, 0.85))
  );
  background: -webkit-linear-gradient(
    top,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0) 60%,
    rgba(0, 0, 0, 0.85) 100%
  );
  background: -o-linear-gradient(
    top,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0) 60%,
    rgba(0, 0, 0, 0.85) 100%
  );
  background: -ms-linear-gradient(
    top,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0) 60%,
    rgba(0, 0, 0, 0.85) 100%
  );
  background: linear-gradient(
    to bottom,
    rgba(255, 255, 255, 0) 0%,
    rgba(0, 0, 0, 0.342) 60%,
    hsla(0, 0%, 0%, 0.747) 100%
  );
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#000000', GradientType=0 );
}

/* --------------------------------------- */
/*                  image                  */
/* --------------------------------------- */

/* ---------- fixed aspect ratio --------- */

// NOTE: the best practice is to have this included
//  in a class for usage
@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .inner-box {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}
